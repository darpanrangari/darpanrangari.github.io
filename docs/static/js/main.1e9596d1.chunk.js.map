{"version":3,"sources":["config/config.js","reducers/consumerReducer.js","reducers/pocketsReducer.js","reducers/index.js","actions/types.js","store/store.js","utils/utils.js","components/CurrencySelect/CurrencySelect.js","components/CurrencyRate/CurrencyRate.js","components/Header/Header.js","api/openexchange.js","components/Exchange/Exchange.js","actions/index.js","components/Pocket/Pocket.js","components/Pockets/Pockets.js","index.js"],"names":["config","baseCurrency","initialState","currencies","rates","pockets","currency","balance","combineReducers","data","state","action","type","con","map","pocket","currencyFrom","debit","parseFloat","currencyFromValue","currencyTo","currencyToValue","isPocketExists","find","push","store","createStore","rootReducer","applyMiddleware","thunk","getCurrencyChar","char","currencyCodeChars","EUR","GBP","USD","pocketBalance","pocketCurrency","getState","o","toFixed","getExchangeRates","value","to","from","base","connect","props","selected","onSelectCurrency","FormControl","variant","style","margin","Select","native","onChange","Object","keys","key","Typography","gutterBottom","CurrencyRate","TextField","id","onChangeRate","Header","AppBar","position","Toolbar","IconButton","onClick","onClickHandler","edge","color","aria-label","icon","heading","axios","create","baseURL","Exchange","onSelectFrom","event","target","setState","exchangeRate","onChangeRateFrom","toString","split","el","i","slice","join","onSelectTo","onChangeRateTo","isValidExchangeCase","exchange","exchangeNow","history","onClickBack","this","fetchCurrencies","fetchLatestRates","then","className","Paper","padding","Grid","container","direction","justify","alignItems","Chip","label","Divider","Button","size","disabled","React","Component","mapDispatchToProps","dispatch","openexchange","get","params","app_id","response","console","log","catch","error","Pocket","ListItem","ListItemText","secondary","Pockets","handlePocketClick","bind","length","List","component","getPockets","ReactDOM","render","Container","maxWidth","exact","path","document","getElementById"],"mappings":"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","file":"static/js/main.1e9596d1.chunk.js","sourcesContent":["const config = {\n    baseCurrency:\"USD\"\n};\nexport default config\n","import {FETCH_CURRENCIES, FETCH_LATEST_RATE} from '../actions/types';\nimport config from '../config/config'\n\nconst initialState = {\n    currencies: {},\n    rates: {},\n    baseCurrency: config.baseCurrency\n};\n\nexport default function githubReducer(state = initialState, action) {\n    switch (action.type) {\n        case FETCH_CURRENCIES:\n            return {\n                ...state,\n                currencies: action.data\n            };\n        case FETCH_LATEST_RATE:\n            return {\n                ...state,\n                rates: action.rates\n            };\n        default:\n            return state;\n    }\n}\n","import {EXCHANGE_NOW} from '../actions/types';\n\nconst initialState = {\n    pockets: [\n        {\n            currency: 'GBP',\n            balance: 50\n        },\n        {\n            currency: 'USD',\n            balance: 100\n        },\n        {\n            currency: 'EUR',\n            balance: 20\n        }],\n};\n\nexport default function pockets(state = initialState, action) {\n    switch (action.type) {\n        case EXCHANGE_NOW:\n\n            const con = state.pockets.map(pocket => {\n                /**\n                 * Exchanging money between 'To' and 'From' pockets and based apply credit debit logic\n                 *\n                 * if the 'To' currency does'nt exits in the pockets then\n                 * create new pocket and add it to pockets\n                 */\n                if (pocket.currency === action.data.currencyFrom) {\n                    const debit = {\n                        currency: pocket.currency,\n                        balance: parseFloat(pocket.balance) - parseFloat(action.data.currencyFromValue)\n                    };\n\n                    return {...pocket, ...debit}\n                } else if (pocket.currency === action.data.currencyTo) {\n                    const debit = {\n                        currency: pocket.currency,\n                        balance: parseFloat(pocket.balance) + parseFloat(action.data.currencyToValue)\n                    };\n\n                    return {...pocket, ...debit}\n                } else {\n                    return pocket\n                }\n            });\n            const isPocketExists = state.pockets.find((pocket) => pocket.currency === action.data.currencyTo);\n            if (!isPocketExists) {\n                 con.push( {\n                    currency: action.data.currencyTo,\n                    balance: parseFloat(action.data.currencyToValue)\n                })\n\n            }\n            return {\n                ...state,\n                pockets: [...con]\n            };\n        default:\n            return state;\n    }\n}\n","import { combineReducers } from 'redux';\nimport data from './consumerReducer';\nimport pockets from './pocketsReducer'\n\nexport default combineReducers({\n    data,\n    pockets\n});\n","export const FETCH_CURRENCIES = 'FETCH_CURRENCIES';\nexport const FETCH_LATEST_RATE = 'FETCH_LATEST_RATE';\nexport const EXCHANGE_NOW = 'EXCHANGE_NOW';\n","import {applyMiddleware, createStore} from \"redux\";\nimport rootReducer from \"../reducers\";\nimport thunk from \"redux-thunk\";\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nexport default store\n","import store from '../store/store'\nimport config from '../config/config'\n\nconst getCurrencyChar = (char) => {\n    const currencyCodeChars = {\n        EUR: '€',\n        GBP: '£',\n        USD: '$'\n    };\n\n    if (currencyCodeChars[char]) {\n        return currencyCodeChars[char];\n    }\n    return char;\n}\n\nconst getCurrencyValue = (fromVal, toVal, toFixed = 4) => {\n    return ((1 / toVal) * fromVal).toFixed(toFixed);\n}\n\nconst convertCurrency = (value, fromRate, toRate) => {\n    if (fromRate && toRate && parseFloat(value)) {\n        return ((parseFloat(value) * fromRate) / toRate).toFixed(2);\n    }\n    return '0.00';\n}\n\nconst validateMoney = (amount) => {\n    var regex = /^\\d+(?:\\.\\d{1,2})?$/;\n    return regex.test(amount)\n}\n\n\nconst currenciesMap = (currencies) => {\n    const mapArr = []\n    for (let c in currencies) {\n        mapArr.push({name: c, value: currencies[c]})\n    }\n    return mapArr\n}\n\nconst pocketBalance = (pocketCurrency) => {\n    const pockets = store.getState().pockets.pockets\n    const pocket = pockets.find(o => o.currency === pocketCurrency)\n    const balance = (pocket && pocket.balance) ? pocket.balance : 0.00\n\n    return balance.toFixed(2)\n}\n\nconst getExchangeRates = (value, to, from) => {\n\n    var rates = store.getState().data.rates.rates;\n    const base = config.baseCurrency;\n\n    if (!rates) {\n        return 0\n    }\n    rates[base] = 1;\n\n\n    if (!rates[to] || !rates[from]) throw \"conversion error\";\n\n\n    if (from === base) {\n        return ((rates[to]) * value).toFixed(2);\n    }\n\n    if (to === base) {\n        return ((1 / rates[from]) * value).toFixed(2);\n    }\n\n    const exchangeRate = (rates[to] * (1 / rates[from])) * value\n\n    return exchangeRate.toFixed(2);\n}\n\nexport {\n    currenciesMap,\n    pocketBalance,\n    getExchangeRates,\n    validateMoney,\n    getCurrencyChar\n}\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport {Typography} from '@material-ui/core'\nimport {\n    FormControl,\n    Select\n} from \"@material-ui/core\"\nimport {getCurrencyChar} from '../../utils/utils'\n\nconst CurrencySelect = (props) => {\n    const {selected, onSelectCurrency, balance, currencies} = props;\n\n    const getOptions = () => {\n        return Object.keys(currencies).map((currency) => {\n            return (\n                <option key={currency} value={currency}>{currency}</option>\n            )\n        })\n    };\n\n    return (\n        <FormControl variant=\"outlined\" style={{margin: '40px 0px 10px 0px'}}>\n            <Select\n                native\n                value={selected}\n                onChange={onSelectCurrency}\n            >\n                <option value=\"\"/>\n                {getOptions()}\n\n            </Select>\n\n            <Typography style={{margin: '10px 0'}} variant=\"subtitle2\" gutterBottom>\n                Balance: {`${getCurrencyChar(selected)} ${balance}`}\n            </Typography>\n        </FormControl>\n    );\n};\n\n\nconst mapStateToProps = state => {\n    return {\n        currencies: state.data.currencies,\n    };\n};\n\nexport default connect(\n    mapStateToProps, {}\n)(CurrencySelect);\n","import React from 'react';\nimport {TextField} from '@material-ui/core'\n\n/**\n * Currency number field\n * @param props\n * @returns {*}\n * @constructor\n */\nconst CurrencyRate = (props) => {\n    return (\n        <TextField style={{margin: '10px 0'}} id=\"outlined-basic\"  type=\"number\" variant=\"outlined\" value={props.selected}\n                   onChange={props.onChangeRate}/>\n    )\n};\n\nexport default CurrencyRate;\n","import {AppBar, IconButton, Toolbar, Typography} from \"@material-ui/core\";\n\nimport React from \"react\";\n\nconst Header = (props) => {\n    return (\n        <AppBar position=\"static\">\n            <Toolbar>\n                <IconButton onClick={props.onClickHandler} edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                    {props.icon}\n                </IconButton>\n                <Typography variant=\"h6\" color=\"inherit\">\n                    {props.heading}\n                </Typography>\n            </Toolbar>\n        </AppBar>\n\n    )\n}\n\nexport default Header\n","import axios from 'axios';\n\n/**\n * Create openexchange api object\n */\nexport default axios.create({\n    baseURL: 'https://openexchangerates.org/api',\n});\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport CurrencySelect from '../CurrencySelect/CurrencySelect';\nimport CurrencyRate from '../CurrencyRate/CurrencyRate';\nimport {Divider, Paper, Button, Chip, Grid, Box, NoSsr} from '@material-ui/core';\nimport Header from \"../Header/Header\";\nimport {pocketBalance, getExchangeRates} from '../../utils/utils';\nimport {fetchLatestRates, exchangeNow, fetchCurrencies} from '../../actions';\nimport TrendingUpIcon from '@material-ui/icons/TrendingUp';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport {getCurrencyChar} from '../../utils/utils'\n\nclass Exchange extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currencyFrom: 'GBP',\n            currencyFromValue: 0.00,\n            currencyTo: 'INR',\n            currencyToValue: 0.00\n        }\n    }\n\n    /**\n     * fetch all the available currencies from '/currencies' api\n     * fetch the latest rate with respect to USD from '/latest' api\n     * set default exchange rate for selected currency\n     *\n     * return {*}\n     */\n    componentDidMount() {\n        const {currencyFrom, currencyTo} = this.state;\n        this.props.fetchCurrencies();\n        this.props.fetchLatestRates().then(() => {\n            this.setState({\n                exchangeRate: getExchangeRates(1, currencyTo, currencyFrom)\n            })\n        })\n    }\n\n    /**\n     * Triggers when 'From' currency selected\n     * Set currencyFrom and exchangeRate\n     * @param event\n     *\n     * return {*}\n     */\n    onSelectFrom = (event) => {\n        const {value} = event.target;\n\n        this.setState({\n            currencyFrom: value,\n            exchangeRate: getExchangeRates(1, this.state.currencyTo, value)\n        });\n    };\n\n    /**\n     * Triggers when 'From currency value' changes\n     * Set currencyFromValue and currencyToValue\n     * @param event\n     *\n     * return {*}\n     */\n    onChangeRateFrom = (event) => {\n        const {value} = event.target;\n\n        this.setState({\n            currencyFromValue: value.toString().split(\".\").map((el, i) => i ? el.split(\"\").slice(0, 2).join(\"\") : el).join(\".\"),//value.match(/^\\d+(?:\\.\\d{1,2})?$/),\n            currencyToValue: getExchangeRates(value, this.state.currencyTo, this.state.currencyFrom),\n        });\n    };\n\n    /**\n     * Triggers when 'To' currency selected\n     * Set currencyTo and exchangeRate\n     * @param event\n     *\n     * return {*}\n     */\n    onSelectTo = (event) => {\n        const {value} = event.target;\n\n        this.setState({\n            currencyTo: value,\n            exchangeRate: getExchangeRates(1, value, this.state.currencyFrom)\n        });\n    };\n\n    /**\n     * Triggers when 'To currency value' changes\n     * Set currencyToValue and currencyFromValue\n     * @param event\n     *\n     * return {*}\n     */\n    onChangeRateTo = (event) => {\n        const {value} = event.target;\n\n        this.setState({\n            currencyToValue: value.toString().split(\".\").map((el, i) => i ? el.split(\"\").slice(0, 2).join(\"\") : el).join(\".\"),\n            currencyFromValue: getExchangeRates(value, this.state.currencyFrom, this.state.currencyTo)\n        });\n    };\n\n    /**\n     * validation for enabling 'Exchange' button\n     * check if pocket balance is available\n     * check if valid amount value is entered\n     *\n     * @returns {boolean}\n     */\n    isValidExchangeCase = () => {\n        const {\n            currencyFrom,\n            currencyFromValue,\n            currencyTo,\n            currencyToValue\n        } = this.state;\n\n\n        if (pocketBalance(currencyFrom) >= parseFloat(currencyFromValue) &&\n            currencyFrom !== currencyTo &&\n            parseFloat(currencyFromValue) >= 1 &&\n            parseFloat(currencyToValue) > 0) {\n            return false;\n        }\n\n        return true;\n    };\n\n    /**\n     * Exchange the currency form 'selected From' to 'selected To'\n     * and on success navigate to pocket screen\n     */\n    exchange = () => {\n        this.props.exchangeNow(this.state);\n        this.props.history.push(\"/\")\n    };\n\n    /**\n     * Header back button click handler\n     */\n    onClickBack = () => {\n        this.props.history.push(\"/\")\n    };\n\n    render() {\n        const {currencyFrom, currencyTo, currencyFromValue, currencyToValue, exchangeRate} = this.state;\n\n        return (\n            <div className=\"exchange\">\n                <Header icon={<ArrowBackIcon/>} onClickHandler={this.onClickBack} heading=\"Exchange\"/>\n\n                <Paper style={{padding: '0 24px'}}>\n                    <Grid\n                        container\n                        direction=\"row\"\n                        justify=\"space-between\"\n                        alignItems=\"center\"\n                    >\n                        <CurrencySelect balance={pocketBalance(currencyFrom)} onSelectCurrency={this.onSelectFrom}\n                                        selected={currencyFrom}/>\n                        <CurrencyRate onChangeRate={this.onChangeRateFrom} selected={currencyFromValue}/>\n                    </Grid>\n                    <Grid\n                        container\n                        direction=\"row\"\n                        justify=\"center\"\n                        alignItems=\"center\"\n                    >\n\n                        <Chip color=\"primary\" style={{margin: '0.5rem'}} variant=\"outlined\"\n                              label={`${getCurrencyChar(currencyFrom)} 1 = ${exchangeRate} ${getCurrencyChar(currencyTo)}`}\n                              icon={<TrendingUpIcon/>}/>\n\n\n                    </Grid>\n                    <Divider/>\n\n                    <Grid\n                        container\n                        direction=\"row\"\n                        justify=\"space-between\"\n                        alignItems=\"center\"\n                    >\n                        <CurrencySelect balance={pocketBalance(currencyTo)} onSelectCurrency={this.onSelectTo}\n                                        selected={currencyTo}/>\n                        <CurrencyRate onChangeRate={this.onChangeRateTo} selected={currencyToValue}/>\n                    </Grid>\n\n                    <Divider/>\n                    <Button onClick={this.exchange} style={{margin: '20px 0'}} size=\"large\"\n                            disabled={this.isValidExchangeCase()}\n                            variant=\"contained\" color=\"secondary\">\n                        Exchange\n                    </Button>\n\n                    {/*<Box p={2} bgcolor=\"primary.main\" color=\"primary.contrastText\">*/}\n                        {/*Server and Client*/}\n                    {/*</Box>*/}\n                    {/*<NoSsr>*/}\n                        {/*<Box p={2} bgcolor=\"secondary.main\" color=\"primary.contrastText\">*/}\n                            {/*Client only*/}\n                        {/*</Box>*/}\n                    {/*</NoSsr>*/}\n                </Paper>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        pockets: state.pockets.pockets\n    };\n};\nconst mapDispatchToProps = {\n    fetchLatestRates,\n    exchangeNow,\n    fetchCurrencies\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Exchange);\n","import {FETCH_CURRENCIES, FETCH_LATEST_RATE, EXCHANGE_NOW} from './types';\nimport openexchange from '../api/openexchange';\nimport config from '../config/config'\n\nconst app_id = 'f3cec79a23274d3a985b6d04ea2b9fea'\n\nexport const fetchCurrencyAction = (data) => {\n    return {\n        type: FETCH_CURRENCIES,\n        data\n    }\n};\n\nexport const fetchLatestRatesAction = (rates) => {\n    return {\n        type: FETCH_LATEST_RATE,\n        rates\n    }\n}\n\nexport const fetchCurrencies = () => {\n    return (dispatch) => {\n        return openexchange.get('/currencies.json')\n            .then(response => {\n                dispatch(fetchCurrencyAction(response.data))\n            })\n            .catch(error => {\n                throw(error);\n            });\n    };\n};\n\nexport const fetchLatestRates = () => {\n    return (dispatch) => {\n        return openexchange.get(`/latest.json`, {\n            params: {\n                app_id,\n                base: config.baseCurrency,\n            }\n        })\n            .then(response => {\n                console.log(response.data, '**************')\n                dispatch(fetchLatestRatesAction(response.data))\n            })\n            .catch(error => {\n                throw(error)\n            })\n    }\n}\n\nexport const exchangeNow = (data) => {\n    return (dispatch) => {\n        dispatch({\n            type: EXCHANGE_NOW,\n            data\n        })\n    };\n};\n","import React from 'react';\nimport {ListItem, ListItemText, Divider} from '@material-ui/core';\nimport {getCurrencyChar} from '../../utils/utils'\n\nconst Pocket = ({data, onClickHandler}) => {\n    return (\n        <>\n            <ListItem onClick={() => onClickHandler(data)}>\n                <ListItemText\n                    secondary={` Balance : ${getCurrencyChar(data.currency)} ${data.balance}`}>{data.currency} </ListItemText>\n                <ListItemText>{data.value}</ListItemText>\n            </ListItem>\n            <Divider/>\n        </>\n    )\n}\nexport default Pocket\n","import React from 'react'\nimport Pocket from '../Pocket/Pocket'\nimport {connect} from 'react-redux';\nimport {\n    Paper, List\n} from '@material-ui/core';\nimport Header from '../Header/Header';\nimport AccountBalanceIcon from '@material-ui/icons/AccountBalance';\n\nclass Pockets extends React.Component {\n    constructor(props) {\n        super(props)\n        this.handlePocketClick = this.handlePocketClick.bind(this)\n    }\n\n    /**\n     * Get all the available Pockets from state\n     * and create a list of pocket\n     *\n     * @returns {[<pocket1>,<pocket2>]}\n     */\n    getPockets() {\n        const {pockets} = this.props;\n\n        if (pockets.length) {\n            return pockets.map((pocket) => {\n                return (\n                    <Pocket\n                        data={pocket}\n                        key={pocket.currency}\n                        onClickHandler={this.handlePocketClick}\n                    />\n\n                )\n            })\n        }\n\n        return <p> You don't not have any pockets</p>;\n\n    }\n\n    /**\n     * click handler for pocket\n     */\n    handlePocketClick() {\n        this.props.history.push(\"/exchange\")\n    }\n\n    render() {\n        return (\n            <Paper>\n\n                <Header icon={<AccountBalanceIcon/>} heading=\"Pockets\"/>\n\n                <List component=\"nav\" aria-label=\"pockets available\">\n                    {this.getPockets()}\n                </List>\n\n            </Paper>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        pockets: state.pockets.pockets\n    };\n};\n\nconst mapDispatchToProps = {}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Pockets);\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { Route, BrowserRouter as Router, Switch } from 'react-router-dom'\nimport Exchange from './components/Exchange/Exchange';\nimport Pockets from './components/Pockets/Pockets'\nimport Container from '@material-ui/core/Container';\nimport store from './store/store.js';\n\nReactDOM.render(\n    <Provider store={store}>\n        <Router>\n            <Container maxWidth=\"sm\">\n                <Switch>\n                    <Route exact path=\"/\" component={Pockets} />\n                    <Route path=\"/exchange\" component={Exchange} />\n                </Switch>\n            </Container>\n        </Router>\n    </Provider>, document.getElementById('root'));\n"],"sourceRoot":""}